# ============================================================
# Byfron Async | newui.exe + _license.dat Scanner (Fast)
# ============================================================

function Write-ColoredLine {
    param (
        [string]$Text,
        [ConsoleColor]$Color = 'White'
    )
    $oldColor = $Host.UI.RawUI.ForegroundColor
    $Host.UI.RawUI.ForegroundColor = $Color
    Write-Host $Text
    $Host.UI.RawUI.ForegroundColor = $oldColor
}

function Center-Text {
    param([string]$Text, [ConsoleColor]$Color = 'White')
    $width = [console]::WindowWidth
    $pad = [math]::Max(0, [math]::Floor(($width - $Text.Length) / 2))
    Write-Host (" " * $pad + $Text) -ForegroundColor $Color
}

function Wait-ForEnter {
    param([string]$Message = "Press Enter to exit...")
    Start-Sleep -Seconds 1
    Write-ColoredLine $Message Yellow
    while ($true) {
        if ([System.Console]::KeyAvailable) {
            $key = [System.Console]::ReadKey($true)
            if ($key.Key -eq "Enter") { break }
        }
        Start-Sleep -Milliseconds 100
    }
}

function Search-FileFast {
    param ([string]$FileName)
    $found = $null
    Write-ColoredLine "Checking for file $FileName ..." Yellow

    # Common locations first (faster)
    $commonPaths = @(
        "$env:ProgramFiles",
        "$env:ProgramFiles(x86)",
        "$env:USERPROFILE\Desktop",
        "$env:USERPROFILE\Downloads",
        "$env:USERPROFILE\Documents",
        "C:\ToolsETA"
    )

    foreach ($path in $commonPaths) {
        if (Test-Path $path) {
            $found = Get-ChildItem -Path $path -Recurse -ErrorAction SilentlyContinue -Force |
                     Where-Object { $_.Name -ieq $FileName } |
                     Select-Object -First 1
            if ($found) { return $found }
        }
    }

    # If not found, scan all drives quickly (top-level only)
    foreach ($drive in Get-PSDrive -PSProvider FileSystem) {
        try {
            $items = Get-ChildItem -Path $drive.Root -ErrorAction SilentlyContinue -Force
            foreach ($item in $items) {
                if ($item.PSIsContainer) {
                    try {
                        $found = Get-ChildItem -Path $item.FullName -ErrorAction SilentlyContinue -Force |
                                 Where-Object { $_.Name -ieq $FileName } |
                                 Select-Object -First 1
                        if ($found) { return $found }
                    } catch {}
                } elseif ($item.Name -ieq $FileName) {
                    return $item
                }
            }
        } catch {}
    }
    return $null
}

# ============================================================
# UI Banner
# ============================================================

Clear-Host
Center-Text "__________          _____                      " Cyan
Center-Text "\______   \___.__._/ ____\______  ____   ____  " Cyan
Center-Text " |    |  _<   |  |\   __\\_  __ \/  _ \ /    \ " Cyan
Center-Text " |    |   \\___  | |  |   |  | \(  <_> )   |  \" Cyan
Center-Text " |______  // ____| |__|   |__|   \____/|___|  /" Cyan
Center-Text "        \/ \/                               \/ " Cyan
Write-Host ""
Center-Text "=== BYFRON ASYNC SCANNER ===" Yellow
Write-Host ""

# ============================================================
# Scan for newui.exe
# ============================================================

$newuiFile = Search-FileFast -FileName "newui.exe"
if ($newuiFile) {
    Write-ColoredLine "[FOUND] newui.exe at: $($newuiFile.FullName)" Green
} else {
    Write-ColoredLine "[INFO] newui.exe not found." Yellow
}

Write-Host ""

# ============================================================
# Scan for _license.dat
# ============================================================

$licenseFile = Search-FileFast -FileName "_license.dat"
if ($licenseFile) {
    try {
        $key = Get-Content -Path $licenseFile.FullName -ErrorAction Stop | Out-String
        $key = $key.Trim()
        if ($key) {
            Write-ColoredLine "Matrix Key Found: $key" Cyan
        } else {
            Write-ColoredLine "[INFO] _license.dat found but empty." Yellow
        }
    } catch {
        Write-ColoredLine "[WARNING] Could not read _license.dat: $($_.Exception.Message)" Yellow
    }
} else {
    Write-ColoredLine "[INFO] No _license.dat file found." White
}

Write-Host ""

# ============================================================
# PC Check
# ============================================================

if ($newuiFile -and $licenseFile) {
    Write-ColoredLine "PC Check failed" Red
}

Wait-ForEnter
