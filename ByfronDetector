# ================= BYFRON ASYNC SCANNER =================
Clear-Host

# Centered ASCII Title
Write-Host "__________          _____" -ForegroundColor Cyan
Write-Host "\______   \___.__._/ ____\______  ____   ____" -ForegroundColor Cyan
Write-Host " |    |  _<   |  |\   __\\_  __ \/  _ \ /    \" -ForegroundColor Cyan
Write-Host " |    |   \\___  | |  |   |  | \(  <_> )   |  \" -ForegroundColor Cyan
Write-Host " |______  // ____| |__|   |__|   \____/|___|  /" -ForegroundColor Cyan
Write-Host "        \/ \/                               \/" -ForegroundColor Cyan
Write-Host "`n"

# Files to search
$files = @("newui.exe", "_license.dat")
$found = @{}

# List of drives
$drives = Get-PSDrive -PSProvider FileSystem | Select-Object -ExpandProperty Root

# Async scanning
$jobs = @()
foreach ($file in $files) {
    foreach ($drive in $drives) {
        $jobs += Start-Job -ScriptBlock {
            param($file, $drive)
            try {
                Get-ChildItem -Path $drive -Recurse -ErrorAction SilentlyContinue -Force | Where-Object { $_.Name -eq $file } | ForEach-Object {
                    return $_.FullName
                }
            } catch {}
        } -ArgumentList $file, $drive
    }
}

# Output loop
foreach ($file in $files) {
    Write-Host "Checking for file $file..."
    $found[$file] = $null
}

# Wait for jobs and collect results
while ($jobs.Count -gt 0) {
    foreach ($job in $jobs.ToArray()) {
        if ($job.State -eq "Completed") {
            $result = Receive-Job $job
            if ($result) {
                $fileName = $job.ChildJobs[0].JobParameters[0]
                if (-not $found[$fileName]) { $found[$fileName] = $result }
                Write-Host "[FOUND] $fileName at: $result"
            }
            Remove-Job $job
            $jobs.Remove($job)
        }
    }
    Start-Sleep -Milliseconds 50  # reduces CPU usage but keeps scan fast
}

# Check if both files exist
if ($found["newui.exe"] -and $found["_license.dat"]) {
    Write-Host "`nPC Check failed" -ForegroundColor Red
} else {
    Write-Host "`nFiles check completed." -ForegroundColor Green
}

Write-Host "`nPress Enter to exit..."
[void][System.Console]::ReadLine()
